const child = require("child_process");
const fs    = require("fs");

const commitTypes = [
	'feat',
	'fix',
	'docs',
	'style',
	'refactor',
	'perf',
	'test',
	'chore'
];

module.exports = {
    /**
     * Create pretty-log.md file and print organized log.
     * @param {string} directory
     */
    generateChangeLog: (directory) => {
        const getTagsGitCommand = 'git log --no-walk=sorted --tags --pretty="%s <subject_n_date> %cd<end_of_tags>"';
        const getTagsGit        = child.execSync(getTagsGitCommand).toString("utf-8");
        const path              = `${directory}/pretty-log.md`;

        let until = '';
        let tagList = getTagsGit.split('<end_of_tags>');

        // Title
        fs.writeFileSync(path, '# Change Log - Pretty Commits\n\n');

        tagList.forEach(tags => {
            if (tags.trim()) {
                tags             = tags.split('<subject_n_date>');
                let noOfCommits  = 0;
                let tag          = tags[0];
                let date         = tags[1];
                let titleDate    = new Date(date);
                const commitLink = '[#%h](https://github.com/Saahiththiyan/pretty_commits/commit/%H)';
                titleDate        = titleDate.getFullYear() + "-" + (titleDate.getMonth() + 1) + "-" + titleDate.getDate();

                /**
                 * Version and Date
                 */
                fs.appendFileSync(path, `## ${tag.trim()} ( ${titleDate} )\n`);

                let getSubjectCommand = `git log --no-merges --format="%s ( ${commitLink} ) <subject_split>" --since="${date.trim()}" --until="${until.trim()}"`;
                const allSubjects     = child.execSync(getSubjectCommand).toString("utf-8");
                let allSubjectList    = allSubjects.split('<subject_split>');

                allSubjectList.forEach(subject => {
                    if (subject.includes(':')) {
                        subject = subject.split(': ');

                        let commitType = subject[0];
                        let message    = subject[1];

                        if (commitTypes.includes(commitType.trim())) {
                            /**
                             * Commit with commit type and commit hash
                             */
                            fs.appendFileSync(path, ` * **${commitType.trim()}** : ${message.trim()}\n`);
                            noOfCommits++;	
                        }
                    }
                });

                /**
                 * Message when vestion does not have any commits yet. 
                 */
                if (noOfCommits===0) {
                    fs.appendFileSync(path, '``` There is no Commits in this version ```\n');
                }
                until = date;
            }
        });
        
        /**
         * Pretty commit signature
         */
        fs.appendFileSync(path, '___ \n > CHANGELOG Generated by pretty commits SL');
    }
};
